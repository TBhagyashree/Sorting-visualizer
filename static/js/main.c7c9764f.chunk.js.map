{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingAlgorithms/QuickSort.js","SortingVisualizer/SortingVisualizer.js","SortingAlgorithms/BubbleSort.js","SortingAlgorithms/InsertionSort.js","SortingAlgorithms/SelectionSort.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quickSort","start","end","pivotIdx","pivotValue","currentSmaller","tempx","temp","partition","SortingVisualizer","state","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","this","resetArray","newSpeed","setState","min","max","random","enableButtons","item","document","getElementsByClassName","disabled","console","log","style","pointerEvents","color","innerHTML","value","strike","arrayBars","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","setTimeout","backgroundColor","newHeight","height","sortAlgo","disableButtons","len","getBubbleSortAnimations","arr","Animations","getInsertionSortAnimations","smallest","smallestIdx","selectionSort","getSelectionSortAnimations","AnimationLogic","Fragment","CssBaseline","Container","maxWidth","Grid","container","spacing","xs","className","Typography","component","variant","map","valuee","idx","key","onClick","Algorithms","Slider","onChange","e","newValue","adjustSpeed","valueLabelDisplay","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c7c9764f.chunk.js","sourcesContent":["const PRIMARY_COLOR = 'turquoise';\r\nconst SECONDARY_COLOR = 'red';\r\n\r\nexport default  function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  } \r\n  function mergeSortHelper(mainArray,startIdx,endIdx,auxiliaryArray,animations,)\r\n  {\r\n        if (startIdx === endIdx) \r\n                return;\r\n        const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n\r\n        mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n        mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n\r\n        doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  } \r\n  \r\n  function doMerge(mainArray,startIdx,middleIdx,endIdx,auxiliaryArray,animations,) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j,SECONDARY_COLOR]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j,PRIMARY_COLOR]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i,SECONDARY_COLOR]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i,PRIMARY_COLOR]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      animations.push([j, j,SECONDARY_COLOR]);\r\n      animations.push([j, j,PRIMARY_COLOR]);\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }","//Always selecting the last element as pivot\r\nexport default function getQuickSortAnimations(array) {\r\n  const animations = [];\r\n  let start = 0;\r\n  let end = array.length - 1;\r\n  quickSort(array, start, end, animations);\r\n  return animations;\r\n}\r\n\r\nfunction quickSort(array, start, end, animations) {\r\n  if (start >= end) {\r\n    return;\r\n  }\r\n  let pivotIdx = partition(array, start, end, animations);\r\n  quickSort(array, start, pivotIdx - 1, animations);\r\n  quickSort(array, pivotIdx + 1, end, animations);\r\n}\r\n\r\nfunction partition(array, start, end, animations) {\r\n  let pivotValue = array[end];\r\n  let currentSmaller = start - 1;\r\n  while (start < end) {\r\n    animations.push([start, end,'red']);\r\n    animations.push([start, end,'turquoise']);\r\n    if (array[start] <= pivotValue) {\r\n      currentSmaller += 1;\r\n      animations.push([start, array[currentSmaller]]);\r\n      animations.push([currentSmaller, array[start]]);\r\n      let tempx = array[currentSmaller];\r\n      array[currentSmaller] = array[start];\r\n      array[start] = tempx;\r\n    } else {\r\n      animations.push([0, array[0]]);\r\n      animations.push([0, array[0]]);\r\n    }\r\n    start += 1;\r\n  }\r\n  animations.push([end, currentSmaller + 1,'red']);\r\n  animations.push([end, currentSmaller + 1,'turquoise']);\r\n  animations.push([end, array[currentSmaller + 1]]);\r\n  animations.push([currentSmaller + 1, array[end]]);\r\n  let temp = array[currentSmaller + 1];\r\n  array[currentSmaller + 1] = pivotValue;\r\n  array[end] = temp;\r\n  return currentSmaller + 1;\r\n}\r\n","import React from 'react';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Slider } from '@material-ui/core';\r\nimport  \"./SortingVisualizer.css\"\r\nimport  getMergeSortAnimations from  \"../SortingAlgorithms/MergeSort.js\"\r\nimport  getBubbleSortAnimations from  \"../SortingAlgorithms/BubbleSort.js\"\r\nimport  getInsertionSortAnimations from  \"../SortingAlgorithms/InsertionSort.js\"\r\nimport getSelectionSortAnimations from \"../SortingAlgorithms/SelectionSort.js\"\r\nimport getQuickSortAnimations from \"../SortingAlgorithms/QuickSort.js\"\r\n\r\nexport default class SortingVisualizer extends React.Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            array:[],\r\n            ANIMATION_SPEED_MS:1,\r\n            NUMBER_OF_ARRAY_BARS:199\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        this.resetArray()\r\n    }\r\n    adjustSpeed(newSpeed){\r\n      this.setState({\r\n        ...this.state,\r\n        ANIMATION_SPEED_MS:newSpeed\r\n      })\r\n    }\r\n    // updateNumberOfBars(num){\r\n    //   this.setState({\r\n    //     ...this.state ,NUMBER_OF_ARRAY_BARS: num\r\n    //   })\r\n    //   this.resetArray(this.state.NUMBER_OF_ARRAY_BARS);\r\n    // }\r\n    resetArray(){\r\n         const array = []\r\n          for(let i =0;i<this.state.NUMBER_OF_ARRAY_BARS;i++){\r\n              array.push(randomIntFromInterval(100,480))\r\n          }\r\n        this.setState({ ...this.state,array})\r\n        this.enableButtons();\r\n    }\r\n\r\n    disableButtons(){\r\n      const item=document.getElementsByClassName(\"listItem\");\r\n      document.getElementsByClassName(\"test\").disabled = true;\r\n      for(let i=0;i<item.length;i++){\r\n        console.log(\"here\")\r\n        item[i].style.pointerEvents = 'none'; \r\n        item[i].style.color='lightcoral'; \r\n        item[i].innerHTML = item[i].value.strike();   \r\n      }\r\n      //const span=document.getElementsByClassName(\"listItem\");    \r\n      //item.style.color='white';\r\n    }\r\n  \r\n    \r\n    enableButtons(){\r\n      const item=document.getElementsByClassName(\"listItem\");\r\n      document.getElementsByClassName(\"test\").disabled = false;\r\n      for(let i=0;i<item.length;i++){\r\n        item[i].style.pointerEvents = 'auto'; \r\n        item[i].style.color='black';  \r\n        item[i].innerHTML = item[i].value;    \r\n      }\r\n      //const span=document.getElementsByClassName(\"listItem\");    \r\n      //item.style.color='black';\r\n    }\r\n  \r\n    AnimationLogic(animations){\r\n      for (let i = 0; i < animations.length; i++) {\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        const subArr_len = animations[i].length;\r\n              if (subArr_len === 3) {\r\n          const [barOneIdx, barTwoIdx,color] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          const barTwoStyle = arrayBars[barTwoIdx].style;\r\n          setTimeout(() => {\r\n            barOneStyle.backgroundColor = color;\r\n            barTwoStyle.backgroundColor = color;\r\n          }, i * this.state.ANIMATION_SPEED_MS);\r\n        } else {\r\n          setTimeout(() => {\r\n            const [barOneIdx, newHeight] = animations[i];\r\n            const barOneStyle = arrayBars[barOneIdx].style;\r\n            barOneStyle.height = `${newHeight}px`;\r\n          }, i * this.state.ANIMATION_SPEED_MS);\r\n        }\r\n      }\r\n      //this.enableButtons();\r\n  }    \r\n    Algorithms(sortAlgo){\r\n      this.resetArray()\r\n      this.disableButtons();\r\n      let animations = []\r\n      if(sortAlgo==='bubbleSort'){\r\n         animations = getBubbleSortAnimations(this.state.array);\r\n      }else if(sortAlgo==='mergeSort'){\r\n         animations = getMergeSortAnimations(this.state.array);\r\n      }else if(sortAlgo==='insertionSort'){\r\n         animations = getInsertionSortAnimations(this.state.array);\r\n      }else if(sortAlgo==='selectionSort'){\r\n         animations = getSelectionSortAnimations(this.state.array);\r\n      }else {\r\n         animations = getQuickSortAnimations(this.state.array);\r\n      }\r\n      this.AnimationLogic(animations)\r\n    }\r\n    // Exit(){\r\n    //   return;\r\n    //   //this.resetArray();\r\n    // }\r\n    render() {\r\n        const {array} = this.state\r\n        return(\r\n          <React.Fragment>\r\n            <CssBaseline/>\r\n            <Container maxWidth=\"lg\" style={{height: '90vh'}}>\r\n                <Grid container spacing={3}>\r\n                    <Grid item xs={12}>\r\n                      <div className=\"header\">\r\n                        <Typography color=\"textSecondary\" component=\"h1\" variant=\"h1\">Sorting\r\n                            Visualizer</Typography></div>\r\n                    </Grid>\r\n            <div className=\"array-container\">\r\n            {array.map((valuee,idx) => (\r\n                <div className=\"array-bar\" key={idx}\r\n                style={{height: `${valuee}px` }}>\r\n            </div>\r\n            ))}\r\n            <div>\r\n            <button   className=\"btn listItem\" onClick={() => this.resetArray() }value=\"Create New Array\">Create New Array</button>\r\n            <button className=\"  btn listItem\" onClick={() => this.Algorithms('mergeSort')} value=\"MERGE SORT\">MERGE SORT</button>\r\n            <button className=\"btn  listItem\" onClick={() => this.Algorithms('insertionSort')} value=\"INSERTION SORT\">INSERTION SORT</button>\r\n            <button className=\"btn listItem\" onClick={() => this.Algorithms('quickSort')} value=\"QUICK SORT\">QUICK SORT</button>\r\n            <button className=\"btn listItem\" onClick={() => this.Algorithms('selectionSort')} value=\"SELECTION SORT\">SELECTION SORT</button>\r\n            <button className=\"btn listItem\" onClick={() => this.Algorithms('bubbleSort')} value=\"BUBBLE SORT\">BUBBLE SORT</button>\r\n            {<button className=\"btn\" onClick={() => this.enableButtons()}>Enable Buttons</button> }\r\n            {/* <button className=\"btn\" onClick={() => this.testSortingAlgorithms()}> Test Sorting Algorithms </button> */}\r\n            </div>\r\n            <div>\r\n            {/* <Slider\r\n                        className = \" sliderr test\"\r\n                         //value={typeof numItems === 'number' ? numItems : 0}\r\n                        onChange={(e, newValue) => this.updateNumberOfBars(newValue)}\r\n                        aria-labelledby=\"input-slider\"\r\n                        valueLabelDisplay=\"auto\"\r\n                        min={10}\r\n                        max={229}\r\n                />   */}\r\n                <div className=\"speed\">\r\n                <h4>Adjust Speed of Execution </h4>\r\n                <Slider\r\n                        className = \"sliderr test\"\r\n                        // value={typeof numItems === 'number' ? numItems : 0}\r\n                        onChange={(e, newValue) => this.adjustSpeed(newValue)}\r\n                        valueLabelDisplay=\"on\"\r\n                        max={20}\r\n                />\r\n                </div>\r\n                \r\n            </div>\r\n            </div>\r\n            </Grid>\r\n            </Container>\r\n</React.Fragment>\r\n    )\r\n    }\r\n}\r\nfunction randomIntFromInterval(min,max){\r\n    return Math.floor(Math.random() * (max - min + 1) + min )\r\n}\r\n\r\n// function arraysAreEqual(arrayOne, arrayTwo) {\r\n//   if (arrayOne.length !== arrayTwo.length) return false;\r\n//   for (let i = 0; i < arrayOne.length; i++) {\r\n//     if (arrayOne[i] !== arrayTwo[i]) {\r\n//       return false;\r\n//     }\r\n//   }\r\n//   return true;\r\n// }\r\n","export default function getBubbleSortAnimations(array){\r\n    const animations = [];\r\n    //const auxiliaryArray = array.slice();\r\n        let len = array.length;\r\n        for(let i = 0; i < len;i++)\r\n        {\r\n            for(let j = 0;j<len ; j++)\r\n            {\r\n                if(array[j] > array[j+1])\r\n                {\r\n                    animations.push([i, j,'red']);\r\n                    animations.push([i, j,'turquoise']);\r\n                    let temp = array[j]\r\n                    array[j] = array[j+1];\r\n                    array[j+1] = temp;\r\n                    animations.push([j, array[j]]);\r\n                    animations.push([j+1, array[j+1]]);\r\n                }\r\n            }\r\n        }\r\n    return animations;\r\n}\r\n","//While advancing to the right, every bar on the left is sorted\r\n//for every new bar, insert it into the right place on the left\r\nexport default  function getInsertionSortAnimations(arr)\r\n{\r\n    const Animations = [];\r\n        for (let i = 1; i < arr.length; i++) {\r\n          let j = i - 1\r\n          let temp = arr[i]\r\n          Animations.push([i,j,'red']);\r\n          Animations.push([i,j,'turquoise']);\r\n          while (j >= 0 && arr[j] > temp) {\r\n            //console.log(\"values of i and j \" , i,j)\r\n            arr[j + 1] = arr[j]\r\n            Animations.push([j+1,arr[j]]);\r\n            j--;\r\n          }\r\n          arr[j+1] = temp\r\n          Animations.push([j+1,temp]);\r\n      }\r\n      return Animations\r\n}\r\n","//loop through and places the smallest element at the start\r\nexport  default function getSelectionSortAnimations(array) {\r\n    const animations = [];\r\n    selectionSort(array, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function selectionSort(array, animations) {\r\n    for (let i = 0; i < array.length - 1; i++) {\r\n      let smallest = array[i];\r\n      let smallestIdx = i;\r\n      for (let j = i + 1; j < array.length; j++) {\r\n        animations.push([smallestIdx, j,'red']);\r\n        animations.push([smallestIdx, j,'turquoise']);\r\n        animations.push([0, array[0]]);\r\n        animations.push([0, array[0]]);\r\n        if (array[j] < smallest) {\r\n          //updates the smallest element and its index\r\n          smallest = array[j];\r\n          smallestIdx = j;\r\n        }\r\n      }\r\n      animations.push([i, smallestIdx,'red']);\r\n      animations.push([i, smallestIdx,'turquoise']);\r\n      animations.push([i, smallest]);\r\n      animations.push([smallestIdx, array[i]]);\r\n      let temp = array[i];\r\n      array[i] = smallest;\r\n      array[smallestIdx] = temp;\r\n    }\r\n  }","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from \"./SortingVisualizer/SortingVisualizer\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <SortingVisualizer> </SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}